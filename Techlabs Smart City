import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Transfer addresses into coordinates


import pip
from pip.__main__ import _main as _main
package_names=["geopy"]
_main(["install"] + package_names + ["--upgrade"])


from pip.__main__ import _main as _main
package_names2=["pandas"]
_main(["install"] + package_names2 + ["--upgrade"])


import pandas as pd
from pip.__main__ import _main as _main
package_names3=["ratelimit"]
_main(["install"] + package_names3 + ["--upgrade"])
from ratelimit import limits, sleep_and_retry


from pip.__main__ import _main as _main
package_names4=["tqdm"]
_main(["install"] + package_names4 + ["--upgrade"])
from tqdm import tqdm
tqdm.pandas()


from pip.__main__ import _main as _main
package_names5=["openpyxl"]
_main(["install"] + package_names5 + ["--upgrade"])
from openpyxl import Workbook
Smart = pd.read_csv("./Smart.csv")


print(Smart.head())


from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent="http")


from geopy.extra.rate_limiter import RateLimiter
geocode = RateLimiter(geolocator.geocode, min_delay_seconds=1)
Smart["location"] =Smart["Address"].apply(geocode)


Smart["point"] =Smart["location"].apply(lambda loc: tuple(loc.point) if loc else None)


Smart["location"] = Smart["Name"].progress_apply(geocode)


print(Smart)
Smart.to_excel("Tabelle.xlsx")


# ###


data = pd.read_excel("Techlabss.xlsx")
x= data.Longitude
y=data.Latitude

# Grid
xgg = np.linspace(min(x), max(x), 10)
ygg = np.linspace(min(y), max(y), 10)
x_1g, y_1g = np.meshgrid(xgg, ygg)
plt.plot(x_1g, y_1g, ".k")
plt.show()

# Matthias Code
def read(path): 
    
    liste = pd.read_excel(path)
    new_list = []
    length = len(liste['Name'].tolist())

    for a in range(length):
        name = liste['Name'].tolist()[a]
        lon = liste['Longitude'].tolist()[a]
        lat = liste['Latitude'].tolist()[a]
        new_list.append([name,lon,lat])
    return new_list

def grid(liste, longitude, latitude):
    
    output=[]

    for part in liste:
        if part[1] > longitude[0] and part[1] < longitude[1]:
            if part[2] > latitude[0] and part [2] < latitude[1]: 
                output.append(part)
    return len(output)
    
liste = read("Techlabss.xlsx")

schools = []

for positionx, elementx in enumerate(xgg[:-1]):
    for positiony, elementy in enumerate(ygg[:-1]):
        print (f"{positionx}_{positiony}")
        print(positionx,elementx, positiony,elementy)
        var = grid(liste, [elementx, xgg[positionx + 1]], [elementy, ygg[positiony + 1]])
        schools.append([elementx, xgg[positionx +1], elementy, ygg[positiony + 1] , var])
        
print(schools)

# data frame creation
df = pd.DataFrame(schools, columns = ["Min Lon", "Max Lon", "Min Lat", "Max Lat", "Number of Schools"])


# heat map
import plotly.express as px
fig = px.density_mapbox(df, lat='Min Lon', lon='Min Lat', z='Number of Schools',
	                        center=dict(lat=51, lon=6), zoom=7,
	                        opacity=0.7, range_color= [65280,255],
	                        radius=50, title="Grundschulen in DÃ¼sseldorf",
	                        mapbox_style="stamen-terrain")
fig.show()
	
from pip.__main__ import _main as _main
package_names11=["psutil requests"]
_main(["install"] + package_names11 + ["--upgrade"])
	

fig.write_html("Grundschulen.html")


